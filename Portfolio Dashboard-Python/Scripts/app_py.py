# -*- coding: utf-8 -*-
"""App.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sLFHT55aw6plEFJDTj-uRo4PEyW7RR-i
"""

## src/app.py
import streamlit as st
import pandas as pd
import plotly.express as px
from plotly.subplots import make_subplots

st.set_page_config(page_title="Portfolio Dashboard", layout="wide")
st.title("üìà Portfolio Dashboard")


df = pd.read_csv("prices.csv", parse_dates=["Date"])
df = df.set_index("Date")


adj_close = df.copy()


ret = adj_close.pct_change().fillna(0)
cum = (1 + ret).cumprod() - 1
cum.index.name = "Date"
vol30 = ret.rolling(30).std()


tidy_price = (
    adj_close
    .reset_index()
    .melt(id_vars="Date", var_name="Ticker", value_name="Price")
)

tidy_cum = (
    cum
    .reset_index()
    .melt(id_vars="Date", var_name="Ticker", value_name="CumReturn")
)

tidy_vol = (
    vol30
    .reset_index()
    .melt(id_vars="Date", var_name="Ticker", value_name="Volatility")
)

last_prices = adj_close.iloc[-1]
shares = {"AAPL": 1, "GOOG": 1, "MSFT": 1, "SPY": 1}  # or your actual holdings
pos_vals = last_prices * pd.Series(shares)

# 5) Build the individual figures

# Fig1: Close Price Over Time
fig1 = px.line(
    tidy_price, x="Date", y="Price", color="Ticker",
    title="Close Price Over Time", template="plotly_white"
)
fig1.update_layout(xaxis_rangeslider_visible=True)

# Fig2: Cumulative Returns
fig2 = px.line(
    tidy_cum, x="Date", y="CumReturn", color="Ticker",
    title="Cumulative Returns", template="plotly_white"
)
fig2.update_layout(xaxis_rangeslider_visible=True, yaxis_tickformat=".0%")

# Fig3: Price Allocation (1-share basis)
fig3 = px.pie(
    names=pos_vals.index, values=pos_vals.values,
    title=f"1-Share Price Allocation as of {last_prices.name.date()}",
    hole=0.4, template="plotly_white"
)

# Fig4: 30-Day Rolling Volatility
fig4 = px.line(
    tidy_vol, x="Date", y="Volatility", color="Ticker",
    title="30-Day Rolling Volatility", template="plotly_white"
)
fig4.update_layout(yaxis_tickformat=".2%")

# Fig5: Risk vs Return
risk = ret.std()
total_ret = cum.iloc[-1]
df_risk = pd.DataFrame({
    "Ticker": risk.index,
    "Risk (œÉ)": risk.values,
    "Total Return": total_ret.values
})
fig5 = px.scatter(
    df_risk, x="Risk (œÉ)", y="Total Return",
    size="Total Return", color="Ticker",
    title="Risk vs Return", template="plotly_white"
)
fig5.update_traces(hovertemplate="<b>%{hovertext}</b><br>Risk: %{x:.2%}<br>Return: %{marker.size:.2%}<extra></extra>")

# Fig6: Contribution to Return
weights = pos_vals / pos_vals.sum()
contrib = weights * total_ret
df_contrib = contrib.reset_index()
df_contrib.columns = ["Ticker","Return Contribution"]
fig6 = px.bar(
    df_contrib, x="Ticker", y="Return Contribution", color="Ticker",
    title="Contribution to Total Return", template="plotly_white"
)
fig6.update_layout(yaxis_tickformat=".0%")

# Fig7: AAPL vs SPY Correlation
pair = ["AAPL","SPY"]
df_corr = ret[pair].reset_index()
fig7 = px.scatter(
    df_corr, x=pair[0], y=pair[1],
    trendline="ols", title="Daily Return Correlation: AAPL vs SPY",
    labels={pair[0]:pair[0], pair[1]:pair[1]}, hover_data=["Date"],
    template="plotly_white"
)

# Fig8: Scatter‚ÄêMatrix of Daily Returns
fig8 = px.scatter_matrix(
    ret.reset_index(), dimensions=ret.columns.tolist(),
    title="Scatter Matrix of Daily Returns", template="plotly_white"
)
fig8.update_traces(diagonal_visible=False)

# 6) Lay out in Streamlit
st.subheader("Price & Returns")
st.plotly_chart(fig1, use_container_width=True)
st.plotly_chart(fig2, use_container_width=True)

col1, col2 = st.columns(2)
with col1:
    st.subheader("Price Allocation")
    st.plotly_chart(fig3, use_container_width=True)
with col2:
    st.subheader("Volatility")
    st.plotly_chart(fig4, use_container_width=True)

st.subheader("Risk & Attribution")
st.plotly_chart(fig5, use_container_width=True)
st.plotly_chart(fig6, use_container_width=True)

st.subheader("Correlations")
st.plotly_chart(fig7, use_container_width=True)
st.plotly_chart(fig8, use_container_width=True)
# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18-po2J4jrvTK93XolO3HoYElWEOE1-5C
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install --quiet dash jupyter-dash

!pip install yfinance plotly kaleido

import yfinance as yf
import pandas as pd
import plotly.express as px

tickers = ["AAPL", "MSFT", "GOOG", "SPY"]


df = yf.download(tickers, start="2024-01-01", end="2025-05-17")
print(df.columns)

df = yf.download(tickers,
                 start="2024-01-01",
                 end="2025-05-17",
                 group_by='column')


close = df['Close']

tidy = (
    close
    .reset_index()                           # brings Date back as a column
    .melt(id_vars="Date",
          var_name="Ticker",
          value_name="Price")
)

df = yf.download(tickers,
                 start="2024-01-01",
                 end="2025-05-17",
                 auto_adjust=True,
                 group_by='column')

adj_close = df['Close']

tidy = (
    adj_close
    .reset_index()
    .melt(id_vars="Date", var_name="Ticker", value_name="Price")
)

df = yf.download(
    tickers,
    start="2024-01-01",
    end="2025-05-17",
    auto_adjust=False,
    group_by="column"
)

print(df)

df = yf.download(
    tickers,
    start="2024-01-01",
    end="2025-05-17",
    auto_adjust=False,
    group_by="column"
)
close = df["Close"]
tidy = (
    close
    .reset_index()
    .melt(id_vars="Date", var_name="Ticker", value_name="Price")
)


fig1 = px.line(
    tidy,
    x="Date",
    y="Price",
    color="Ticker",
    title="Close Price Over Time",
    template="plotly_white",
    color_discrete_sequence=px.colors.qualitative.Set1,
    line_shape="spline",
    render_mode="svg"
)


fig1.update_traces(
    mode="lines+markers",
    line=dict(width=3),
    marker=dict(size=5, opacity=0.7),
    hovertemplate=(
        "<b>%{fullData.name}</b><br>"
        "Date: %{x|%Y-%m-%d}<br>"
        "Price: $%{y:.2f}<extra></extra>"
    )
)


fig1.update_layout(
    xaxis=dict(
        rangeslider=dict(visible=True, thickness=0.05),
        rangeselector=dict(
            bgcolor="LightGray",
            activecolor="DarkGray",
            buttons=[
                dict(count=1,  label="1m",  step="month", stepmode="backward"),
                dict(count=6,  label="6m",  step="month", stepmode="backward"),
                dict(count=1,  label="YTD", step="year",  stepmode="todate"),
                dict(count=1,  label="1y",  step="year",  stepmode="backward"),
                dict(step="all", label="All")
            ]
        ),
        showgrid=True,
        gridcolor="LightGray",
    ),
    yaxis=dict(
        showgrid=True,
        gridcolor="LightGray",
        title="Price (USD)"
    ),
    margin=dict(l=50, r=20, t=60, b=80),
    legend=dict(
        title="Ticker",
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    )
)

fig1.show()

start_date = "2024-01-01"
fig2 = px.line(
    tidy_cum,
    x="Date",
    y="CumReturn",
    color="Ticker",
    title=f"Cumulative Returns Since {start_date}",
    template="plotly_white",
    color_discrete_sequence=px.colors.qualitative.Set1,
    line_shape="spline",
    render_mode="svg"
)
fig2.update_traces(
    mode="lines+markers",
    line=dict(width=3),
    marker=dict(size=5, opacity=0.7),
    hovertemplate=(
        "<b>%{fullData.name}</b><br>"
        "Date: %{x|%Y-%m-%d}<br>"
        "Cumulative: %{y:.2%}<extra></extra>"
    )
)
fig2.update_layout(
    xaxis=dict(
        rangeslider=dict(visible=True, thickness=0.05),
        rangeselector=dict(
            bgcolor="LightGray",
            activecolor="DarkGray",
            buttons=[
                dict(count=1,  label="1m",  step="month", stepmode="backward"),
                dict(count=6,  label="6m",  step="month", stepmode="backward"),
                dict(count=1,  label="YTD", step="year",  stepmode="todate"),
                dict(count=1,  label="1y",  step="year",  stepmode="backward"),
                dict(step="all", label="All")
            ]
        ),
        showgrid=True, gridcolor="LightGray"
    ),
    yaxis=dict(
        showgrid=True, gridcolor="LightGray",
        tickformat=".0%"
    ),
    margin=dict(l=50, r=20, t=60, b=80),
    legend=dict(
        title="Ticker", orientation="h",
        yanchor="bottom", y=1.02, xanchor="right", x=1
    )
)
fig2.show()

# ─────────────────────────────────────────────

fig3 = px.pie(
    names=last_prices.index,
    values=last_prices.values,
    title=f"Price Allocation as of {last_prices.name.date()}",
    hole=0.4,
    template="plotly_white",
    color_discrete_sequence=px.colors.sequential.Plasma_r
)
fig3.update_traces(
    textinfo="percent+label",
    hovertemplate=(
        "<b>%{label}</b><br>"
        "Value: $%{value:.2f} (<b>%{percent}</b>)<extra></extra>"
    )
)
fig3.update_layout(
    margin=dict(l=20, r=20, t=50, b=20),
    legend=dict(orientation="h", y=-0.1, x=0.5, xanchor="center")
)
fig3.show()

fig4 = px.line(
    tidy_vol,
    x="Date",
    y="Volatility",
    color="Ticker",
    title="30-Day Rolling Volatility",
    template="plotly_white",
    color_discrete_sequence=px.colors.qualitative.Set1,
    line_shape="spline",
    render_mode="svg"
)
fig4.update_traces(
    mode="lines",
    line=dict(width=3),
    hovertemplate=(
        "<b>%{fullData.name}</b><br>"
        "Date: %{x|%Y-%m-%d}<br>"
        "Volatility: %{y:.2%}<extra></extra>"
    )
)
fig4.update_layout(
    xaxis=dict(showgrid=True, gridcolor="LightGray"),
    yaxis=dict(showgrid=True, gridcolor="LightGray", tickformat=".2%"),
    margin=dict(l=50, r=20, t=60, b=40),
    legend=dict(title="Ticker", orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
)

risk = ret.std()
total_ret = cum.iloc[-1]


df_risk = pd.DataFrame({
    "Ticker": risk.index,
    "Risk (σ)": risk.values,
    "Total Return": total_ret.values
})

fig5 = px.scatter(
    df_risk,
    x="Risk (σ)",
    y="Total Return",
    size="Total Return",
    color="Ticker",
    title="Risk vs Return",
    template="plotly_white",
    color_discrete_sequence=px.colors.qualitative.Set1,
    hover_name="Ticker"
)
fig5.update_traces(
    marker=dict(opacity=0.8, line=dict(width=1, color="DarkSlateGrey")),
    hovertemplate=(
        "<b>%{hovertext}</b><br>"
        "Risk (σ): %{x:.2%}<br>"
        "Total Return: %{marker.size:.2%}<extra></extra>"
    )
)
fig5.update_layout(
    xaxis=dict(title="Volatility (σ)", showgrid=True, gridcolor="LightGray"),
    yaxis=dict(title="Total Return", tickformat=".0%", showgrid=True, gridcolor="LightGray"),
    legend=dict(title="", orientation="h", y=1.02, x=1, xanchor="right"),
    margin=dict(l=50, r=20, t=60, b=50)
)
fig5.show()

# ─────────────────────────────────────────────
fig6 = px.bar(
    contrib_df, ## assumes contrib_df with ["Ticker","Return Contribution"]
    x="Ticker",
    y="Return Contribution",
    color="Ticker",
    title="Contribution to Total Portfolio Return",
    template="plotly_white",
    color_discrete_sequence=px.colors.qualitative.Pastel
)
fig6.update_traces(
    texttemplate="%{y:.2%}",
    textposition="outside",
    marker_line_color="DarkSlateGrey",
    marker_line_width=1
)
fig6.update_layout(
    yaxis=dict(tickformat=".0%", title="Return Contribution", showgrid=True, gridcolor="LightGray"),
    xaxis=dict(title="Ticker"),
    showlegend=False,
    margin=dict(l=50, r=20, t=60, b=50)
)
fig6.show()

fig7 = px.scatter(
    scatter_df,  ## assumes scatter_df with Date,AAPL,SPY
    x=pair[0],
    y=pair[1],
    trendline="ols",
    template="plotly_white",
    title=f"Daily Return Correlation: {pair[0]} vs {pair[1]}",
    labels={pair[0]: f"{pair[0]} Daily Return", pair[1]: f"{pair[1]} Daily Return"},
    hover_data=["Date"]
)
fig7.update_traces(
    marker=dict(size=7, color="MediumPurple", opacity=0.7),
    hovertemplate=(
        "Date: %{customdata[0]|%Y-%m-%d}<br>"
        f"{pair[0]}: "+"%{x:.2%}<br>"
        f"{pair[1]}: "+"%{y:.2%}<extra></extra>"
    )
)
fig7.update_layout(
    xaxis=dict(showgrid=True, gridcolor="LightGray"),
    yaxis=dict(showgrid=True, gridcolor="LightGray"),
    margin=dict(l=50, r=20, t=60, b=50)
)
fig7.show()

!pip install --quiet panel
!pip install jupyter_bokeh

fig = make_subplots(
    rows=3, cols=3,
    specs=[
        [{"type":"xy"},    {"type":"xy"},    {"type":"domain"}],
        [{"type":"xy"},    {"type":"xy"},    {"type":"xy"}],
        [{"type":"xy"},    {"type":"xy"},    {"type":"xy"}],
    ],
    subplot_titles=[
        "Adjusted Close Price",      # 1,1
        "Cumulative Returns",        # 1,2
        "Allocation",                # 1,3
        "30-Day Volatility",         # 2,1
        "Risk vs Return",            # 2,2
        "Return Contribution",       # 2,3
        "Return Correlation: AAPL vs SPY",  # 3,1
        "",                          # 3,2
        ""                           # 3,3
    ]
)


fig.add_traces(fig1.data, rows=1, cols=1)
fig.add_traces(fig2.data, rows=1, cols=2)
fig.add_traces(fig4.data, rows=2, cols=1)
fig.add_traces(fig5.data, rows=2, cols=2)
fig.add_traces(fig6.data, rows=2, cols=3)
fig.add_traces(fig3.data, rows=1, cols=3)

fig.add_traces(fig7.data, rows=3, cols=1)

for trace in fig.data:
    if trace.name in ("AAPL Daily Return", "SPY Daily Return"):
        trace.hovertemplate = (
            "Pair: AAPL vs SPY<br>"
            "%{fullData.name}: %{y:.2%}<br>"
            "Date: %{customdata[0]|%Y-%m-%d}<extra></extra>"
        )

for r, c in [(3,2),(3,3)]:
    fig.update_xaxes(visible=False, row=r, col=c)
    fig.update_yaxes(visible=False, row=r, col=c)

fig.update_layout(
    height=1200, width=1200,
    showlegend=False,
    title_text="📊 My Portfolio Dashboard"
)
fig.show()

fig8 = px.scatter_matrix(
    ret.reset_index(),
    dimensions=ret.columns.tolist(),
    title="Scatter Matrix of Daily Returns",
    template="plotly_white",
    color_discrete_sequence=px.colors.diverging.Tealrose
)
fig8.update_traces(
    marker=dict(size=3, opacity=0.6),
    diagonal_visible=False
)
fig8.update_layout(
    width=700, height=700,
    margin=dict(l=30, r=30, t=50, b=30)
)
fig8.show()